# -*- coding: utf-8 -*-
"""Algoritma_DES_MuhamadFannanNajmaFalahi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mUtyPssciEIqPDIVP2QEEBNeGGZyd2IV

# **Langkah Awal Permutasian**
"""

plaintext = input("Masukan Plaintext : ") # Membuat plaintext dengan panjang 8 karakter / 64 bit

"""**Mengubah plaintext ke binary**"""

if(len(plaintext) != 8): # mengecek kondisi jika panjang plaintext tidak sama dengan 8, maka pembuatan plaintext gagal
  print("gagal")
  plaintext = ""
else: # Jika panjang plaintext sama dengan 8
  plaintext_bin = ''.join(format(ord(i), '08b') for i in plaintext) # Mengubah isi plaintext menjadi binary
print('Plaintext : ',plaintext_bin)

"""**Membuat Matrix urutan bit plaintext awal**"""

matrix = [['' for i in range(8)] for j in range(8)] # Membuat sebuah matrix untuk menampung urutan bit plaintext awal
angka = 1
for i in range(8):
  for j in range(8):
    matrix[i][j] = angka
    angka+=1
matrix

"""**Membuat Matrix Permutasian 1**"""

matrix_permutasian1 = [['' for i in range(8)] for j in range(8)] # Membuat sebuah matrix untuk menampung urutan bit permutasian ke 1
genap_klm = 7;  # Membuat variabel genap_klm untuk menyimpan nilai panjang kolom matrix dan dimulai dari index terakhir atau 7
genap_brs = 0; # Membuat variabel genap_brs untuk menyimpan nilai panjang baris matrix dan dimulai dari index pertama atau 0
ganjil_klm = 7;
ganjil_brs = 4; # Membuat variabel ganjil_brs untuk menyimpan nilai panjang baris matrix dan dimulai dari index ke 4

for i in range(8): # Melakukan loop untuk baris matrix_permutasian1
  for j in range(8): # Melakukan loop untuk kolom matrix_permutasian1
    if(matrix[i][j] % 2 != 0): # # Mengecek kondisi pada matrix urutan bit awal, jika setiap nilai iterasi bernilai ganjil
      if(ganjil_brs < 8): # Mengecek kondisi lagi, jika nilai pada ganjil_brs kurang dari 8
        matrix_permutasian1[ganjil_brs][ganjil_klm] = matrix[i][j] # Maka pada setiap nilai iterasi matrix_permutasian1 akan diubah menjadi nilai pada iterasi matrix awal
        ganjil_brs+=1 # nilai ganjil_baris ditambah 1
      else: # jika nilai ganjil_brs lebih 8
        ganjil_brs=4 # nilai ganjil_brs akan dikembalikan ke nilai awal atau bernilai 4
        ganjil_klm-=1 # nilai ganjil_klm akan dikurang 1
        matrix_permutasian1[ganjil_brs][ganjil_klm] = matrix[i][j]
        ganjil_brs+=1 # nilai ganjil_brs ditambah 1
    else: #jika nilai iterasi pada matrix bernilai genap
      if(genap_brs < 4): # mengecek kondisi jika nilai genap_brs kurang dari 4
        matrix_permutasian1[genap_brs][genap_klm] = matrix[i][j] # # Maka pada setiap nilai iterasi matrix_permutasian1 akan diubah menjadi nilai pada iterasi matrix awal
        genap_brs+=1
      else:
        genap_brs=0 # nilai genap_brs akan dikembalikan ke nilai awal atau bernilai 0
        genap_klm-=1
        matrix_permutasian1[genap_brs][genap_klm] = matrix[i][j]
        genap_brs += 1

matrix_permutasian1

"""**Melakukan Permutasian 1 pada matrix ke plaintext**"""

angka_ip = 0; # membuat variabel angka_ip untuk menyimpan nilai setiap matrix_permutasian1
ip = ''; # membuat variabel ip untuk menyimpan hasil permutasian
for i in range(8): # melakukan looping pada baris matrix_permutasian1
  for j in range(8): # melakukan looping pada kolom matrix_permutasian1
    angka_ip = matrix_permutasian1[i][j] # angka_ip menyimpan nilai matrix_permutasian1 setiap iterasi
    ip += plaintext_bin[angka_ip-1] # menambahkan nilai pada plaintext_bin dari index sesuai nilai angka_ip kedalam string ip
print('IP : ',ip)

"""**Langkah 2, membagi plainteks menjadi 2**"""

L0 = ip[0:32] # Untuk menyimpan nilai L0
R0 = ip[32:64] # untuk menyimpan nilai R0
print('L0 : ',L0)
print('R0 : ',R0)

"""**Membuat Kunci, dan diubah ke hexadesimal**"""

hexa_to_bin = {
        '0' : "0000",
        '1' : "0001",
        '2' : "0010",
        '3' : "0011",
        '4' : "0100",
        '5' : "0101",
        '6' : "0110",
        '7' : "0111",
        '8' : "1000",
        '9' : "1001",
        'A' : "1010",
        'B' : "1011",
        'C' : "1100",
        'D' : "1101",
        'E' : "1110",
        'F' : "1111" }
hexa_to_bin

"""**Langkah 3: Pembangkitan Kunci**"""

kunci = input("Masukan Kunci :")

kunci = kunci.replace(" ","")
kunci = kunci.upper()
#Membuat kunci menjadi binary
if(len(kunci) != 16):
  print("kunci gagal")
  kunci = ""
else:
  kunci_bin = ''
  for i in range(len(kunci)):
    kunci_bin += hexa_to_bin[kunci[i]]

print('kunci :', kunci_bin)

"""**Langkah 4: Permutasian Kunci**"""

matrix_permutasian2 = [57, 49, 41, 33, 25, 17, 9,
                       1, 58, 50, 42, 34, 26, 18,
                       10, 2, 59, 51, 43, 35, 27,
                       19, 11, 3, 60, 52, 44, 36,
                       63, 55, 47, 39, 31, 23, 15,
                       7, 62, 54, 46, 38, 30, 22,
                       14, 6, 61, 53, 45, 37, 29,
                       21, 13, 5, 28, 20, 12, 4 ]

kun = '';
for i in range(56):
    kun += kunci_bin[matrix_permutasian2[i]-1]
print('Kunci Permutasi :',kun)

"""**Langkah 5: Memecah Kunci Menjadi C0 dan D0**"""

C0 = kun[:28]
D0 = kun[28:]
print('CO : ',C0)
print('DO : ',D0)

"""**Langkah 6 dan Langkah 7: Membuat Swap kiri pada C0 dan D0, dan membuat sampai C16 dan D16**,**dan Penggabungan C dan D**"""

CD_Gab = []
tabel_wrapping = [1, 1, 2, 2,
            2, 2, 2, 2,
            1, 2, 2, 2,
            2, 2, 2, 1 ]
C = C0
D = D0
st = ''
st2 = ''
for i in range(16):
  for j in range(tabel_wrapping[i]):
    st += C[j]
    st2 += D[j]
  C_key = C[tabel_wrapping[i]:] + st
  D_key = D[tabel_wrapping[i]:] + st2
  C = C_key
  D = D_key
  st = ''
  st2 = ''
  CD_Gab.append(C+D)
  print(f"C{i+1} : {C}")
  print(f"D{i+1} : {D}")
  print("-----------------------------------")
  print(f"C{i+1}D{i+1} : {CD_Gab[i]}\n")

"""**Langkah 8: Melakukan Permutasian pada gabungan C dan D, dan memdapatkan K1 sampai K16**"""

matrix_permutasianPC2= [14, 17, 11, 24, 1, 5,
                        3, 28, 15, 6, 21, 10,
                        23, 19, 12, 4, 26, 8,
                        16, 7, 27, 20,  13, 2,
                        41, 52, 31, 37, 47, 55,
                        30, 40, 51, 45, 33, 48,
                        44, 49, 39, 56, 34, 53,
                        46, 42, 50, 36, 29, 32]

k_pc2 = []
k = '';
for i in range(len(CD_Gab)):
  for j in range(48):
    k += CD_Gab[i][matrix_permutasianPC2[j]-1]
  k_pc2.append(k)
  k = '';
  print(f"K{i+1} : {k_pc2[i]}")

"""# **AWAL PROSES ENCHIPERING**


"""

tabel_expansi = [32, 1, 2, 3, 4, 5,
                  4, 5, 6, 7, 8, 9,
                  8, 9, 10, 11, 12, 13,
                  12, 13, 14, 15, 16, 17,
                  16, 17, 18, 19, 20, 21,
                  20, 21, 22, 23, 24, 25,
                  24, 25, 26, 27, 28, 29,
                  28, 29, 30, 31, 32, 1]

s_box = [
         [
         [ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
         [ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
         [ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
         [ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
         ],
        [
         [ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
         [ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
         [ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
         [ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
        ],
        [
         [ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
         [ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
         [ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
         [ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
        ],
        [
         [ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
         [ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
         [ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
         [ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
        ],
        [
         [ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
         [ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
         [ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
         [ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
        ],
        [
         [ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
         [ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
         [ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
         [ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
        ],
        [
         [ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
         [ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
         [ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
         [ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
        ],
        [
         [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
         [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
         [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
         [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
        ]
      ]

def dec_to_bin(n):
    binary = bin(n)[2:]
    while len(binary) < 4:
        binary = '0' + binary
    return binary

def bin_to_dec(msg):
  decimal,i=0,0
  while(msg!=0):
    dec=msg%10
    decimal=decimal+dec*pow(2, i)
    msg=msg//10
    i+=1
  return decimal

"""**Membuat Expansi pada R0**"""

ER0 = ''
R = R0
for i in range(48):
  ER0 += R[tabel_expansi[i]-1]
print("E(R0) :",ER0)

"""**Melakukan XOR dari E(R0) dan K1, dan mendapatkan nilai A1**"""

A1 = ''
for j in range(48):
  if(ER0[j] == k_pc2[0][j]):
    A1+='0'
  else:
    A1+='1'
print("A1 :",A1)

"""**Melakukan Subtitusi pada S-Box dari nilai 8 blok A1**"""

B1=""
for i in range(0,8):
  row=bin_to_dec(int(A1[i*6]+A1[i*6+5]))
  col=bin_to_dec(int(A1[i*6+1]+A1[i*6+2]+A1[i*6+3]+A1[i*6+4]))
  val=s_box[i][row][col]
  B1 += dec_to_bin(int(val))
print("B1 :",B1)

"""**Permutasian hasil nilai B1**"""

p_box = [16, 7, 20, 21, 29, 12, 28, 17,
            1, 15, 23, 26, 5, 18, 31, 10,
            2, 8, 24, 14, 32, 27, 3, 9,
            19, 13, 30, 6, 22, 11, 4, 25]

PB1 = ''
for i in range(len(B1)):
  PB1 += B1[p_box[i]-1]
print("PB1 :",PB1)

"""**MELAKUKAN XOR dari PB1 daan L0, untuk mendapatkan Nilai R1**"""

R1 = ''
for j in range(32):
  if(PB1[j] == L0[j]):
    R1+='0'
  else:
    R1+='1'

L1 = R0
print('L1 : ', L1)
print('R1 : ', R1)

"""# **Loop untuk mendapatkan L1, R1 sampai L16, R16**"""

hasilLR = []
hasilLR.append(L0+R0)
PB = []
Li = L1
Ri = R1

for i in range(1,16):
  ER = ''
  R = Ri
  for j in range(48):
    ER += R[tabel_expansi[j]-1]
  Ai = ''
  kun = ''
  for k in range(48):
    kun += k_pc2[i][k]
    if(ER[k] == k_pc2[i][k]):
        Ai+='0'
    else:
        Ai+='1'
  Bi = ''
  for z in range(0,8):
    row=bin_to_dec(int(Ai[z*6]+Ai[z*6+5]))
    col=bin_to_dec(int(Ai[z*6+1]+Ai[z*6+2]+Ai[z*6+3]+Ai[z*6+4]))
    val=s_box[z][row][col]
    Bi += dec_to_bin(int(val))
  PBi = ''
  for x in range(len(Bi)):
    PBi += Bi[p_box[x]-1]
  hasilLR.append(Li+Ri)
  print(f"PERPUTARAN {i+1}")
  print(f"P(B{i+1}) : {PBi}")
  print(f"L({i+1})  : {Li}")
  Ri = ''
  for c in range(32):
    if(PBi[c] == Li[c]):
      Ri+='0'
    else:
      Ri+='1'
  Li = R
  if i == 15 :
    hasilLR.append(Ri+Li)
    print("---------------------------------------------")
    print(f"R({i+1})  : {Ri}")
    print(f"L({i+1})  : {Li}")
    L16 = Ri
    R16 = Li
  else:
    print("---------------------------------------------")
    print(f"R({i+1})  : {Ri}\n")

chiper_permutasi = [40, 8, 48, 16, 56, 24, 64, 32,
              39, 7, 47, 15, 55, 23, 63, 31,
              38, 6, 46, 14, 54, 22, 62, 30,
              37, 5, 45, 13, 53, 21, 61, 29,
              36, 4, 44, 12, 52, 20, 60, 28,
              35, 3, 43, 11, 51, 19, 59, 27,
              34, 2, 42, 10, 50, 18, 58, 26,
              33, 1, 41, 9, 49, 17, 57, 25 ]

cipher = ''
for i in range(64):
  cipher += hasilLR[16][chiper_permutasi[i]-1]

print('cipher : ', cipher)

"""# **Proses Decrypt**"""

hasilDec = []
Li = L16
Ri = R16
kk = 15
for i in range(16):
  ER = ''
  R = Ri
  for j in range(48):
    ER += R[tabel_expansi[j]-1]
  Ai = ''
  for k in range(48):
    if(ER[k] == k_pc2[kk][k]):
        Ai+='0'
    else:
        Ai+='1'
  kk-=1
  Bi = ''
  for z in range(0,8):
    row=bin_to_dec(int(Ai[z*6]+Ai[z*6+5]))
    col=bin_to_dec(int(Ai[z*6+1]+Ai[z*6+2]+Ai[z*6+3]+Ai[z*6+4]))
    val=s_box[z][row][col]
    Bi += dec_to_bin(int(val))
  PBi = ''
  for x in range(len(Bi)):
    PBi += Bi[p_box[x]-1]
  hasilDec.append(Li+Ri)
  print(f"PERPUTARAN {i+1}")
  print(f"P(B{i+1}) : {PBi}")
  print(f"L({i+1})  : {Li}")
  Ri = ''
  for c in range(32):
    if(PBi[c] == Li[c]):
      Ri+='0'
    else:
      Ri+='1'
  Li = R
  if i == 15 :
    hasilDec.append(Ri+Li)
    print("---------------------------------------------")
    print(f"R({i+1})  : {Ri}")
    print(f"L({i+1})  : {Li}")
  else:
    print("---------------------------------------------")
    print(f"R({i+1})  : {Ri}\n")

dekrip_permutasi = [40, 8, 48, 16, 56, 24, 64, 32,
              39, 7, 47, 15, 55, 23, 63, 31,
              38, 6, 46, 14, 54, 22, 62, 30,
              37, 5, 45, 13, 53, 21, 61, 29,
              36, 4, 44, 12, 52, 20, 60, 28,
              35, 3, 43, 11, 51, 19, 59, 27,
              34, 2, 42, 10, 50, 18, 58, 26,
              33, 1, 41, 9, 49, 17, 57, 25 ]

dekrip = ''
for i in range(64):
  dekrip += hasilDec[16][dekrip_permutasi[i]-1]

print('Dekrip : ', dekrip)

binary_dec = [dekrip[i:i + 8] for i in range(0,len(dekrip),8)]
decimal_char = [int(i,2) for i in binary_dec]

dekrip_text = ''.join(chr(decimal) for decimal in decimal_char)

print("Plaintext :", plaintext)
print('Dekrip    :', dekrip_text)